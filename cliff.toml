[changelog]
# changelog header
header = """
# Changelog
"""
# template for the changelog body
body = """
{% if version %}
    ## {{ version | trim_start_matches(pat="v") }}
{% else %}
    ## Unreleased
{% endif %}
{% for commit in commits %}
    - {{ commit.group | lower }}: {{ commit.message | trim }}
{%- endfor %}
"""
# changelog footer (empty to remove the default footer)
footer = ""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "feat" },
    { message = "^fix", group = "fix" },
    { message = "^doc", group = "docs" },
    { message = "^perf", group = "perf" },
    { message = "^refactor", group = "refactor" },
    { message = "^style", group = "style" },
    { message = "^test", group = "test" },
    { message = "^wip", skip = true },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore|^ci", group = "chore" },
    { body = ".*security", group = "security" },
    { message = "^revert", group = "revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = ".*"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42