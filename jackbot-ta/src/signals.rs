use rust_decimal::Decimal;

use crate::patterns::{self, Cross};

/// Trading signal generated by a pattern.
#[derive(Debug, PartialEq, Eq)]
pub enum Signal {
    Buy,
    Sell,
}

/// Generates signals based on moving average crossovers.
#[derive(Debug)]
pub struct CrossOverSignal {
    prev_fast: Option<Decimal>,
    prev_slow: Option<Decimal>,
}

impl CrossOverSignal {
    /// Create a new crossover signal generator.
    pub fn new() -> Self {
        Self { prev_fast: None, prev_slow: None }
    }

    /// Update with the latest fast and slow values and return a signal if a
    /// crossover occurred.
    pub fn update(&mut self, fast: Decimal, slow: Decimal) -> Option<Signal> {
        let out = if let (Some(pf), Some(ps)) = (self.prev_fast, self.prev_slow) {
            match patterns::crossover(pf, ps, fast, slow) {
                Some(Cross::Above) => Some(Signal::Buy),
                Some(Cross::Below) => Some(Signal::Sell),
                None => None,
            }
        } else {
            None
        };
        self.prev_fast = Some(fast);
        self.prev_slow = Some(slow);
        out
    }
}
