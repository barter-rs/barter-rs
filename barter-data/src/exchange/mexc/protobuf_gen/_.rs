// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicDealsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub deals: ::prost::alloc::vec::Vec<PublicDealsV3ApiItem>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicDealsV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub trade_type: i32,
    #[prost(int64, tag = "4")]
    pub time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicIncreaseDepthsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub asks: ::prost::alloc::vec::Vec<PublicIncreaseDepthV3ApiItem>,
    #[prost(message, repeated, tag = "2")]
    pub bids: ::prost::alloc::vec::Vec<PublicIncreaseDepthV3ApiItem>,
    #[prost(string, tag = "3")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicIncreaseDepthV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicLimitDepthsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub asks: ::prost::alloc::vec::Vec<PublicLimitDepthV3ApiItem>,
    #[prost(message, repeated, tag = "2")]
    pub bids: ::prost::alloc::vec::Vec<PublicLimitDepthV3ApiItem>,
    #[prost(string, tag = "3")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicLimitDepthV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateOrdersV3Api {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub client_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub avg_price: ::prost::alloc::string::String,
    #[prost(int32, tag = "7")]
    pub order_type: i32,
    #[prost(int32, tag = "8")]
    pub trade_type: i32,
    #[prost(bool, tag = "9")]
    pub is_maker: bool,
    #[prost(string, tag = "10")]
    pub remain_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub remain_quantity: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "12")]
    pub last_deal_quantity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "13")]
    pub cumulative_quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub cumulative_amount: ::prost::alloc::string::String,
    #[prost(int32, tag = "15")]
    pub status: i32,
    #[prost(int64, tag = "16")]
    pub create_time: i64,
    #[prost(string, optional, tag = "17")]
    pub market: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "18")]
    pub trigger_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "19")]
    pub trigger_price: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "20")]
    pub state: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "21")]
    pub oco_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub route_factor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "23")]
    pub symbol_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "24")]
    pub market_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "25")]
    pub market_currency_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "26")]
    pub currency_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicBookTickerV3Api {
    #[prost(string, tag = "1")]
    pub bid_price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub bid_quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ask_price: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ask_quantity: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateDealsV3Api {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub trade_type: i32,
    #[prost(bool, tag = "5")]
    pub is_maker: bool,
    #[prost(bool, tag = "6")]
    pub is_self_trade: bool,
    #[prost(string, tag = "7")]
    pub trade_id: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub client_order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub fee_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub fee_currency: ::prost::alloc::string::String,
    #[prost(int64, tag = "12")]
    pub time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateAccountV3Api {
    #[prost(string, tag = "1")]
    pub vcoin_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub coin_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub balance_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub balance_amount_change: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub frozen_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub frozen_amount_change: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(int64, tag = "8")]
    pub time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicSpotKlineV3Api {
    /// K线周期(Min1,Min5,Min15,Min30,Min60,Hour4,Hour8,Day1,Week1,Month1)
    #[prost(string, tag = "1")]
    pub interval: ::prost::alloc::string::String,
    /// 窗口开始时间戳(秒时间戳)
    #[prost(int64, tag = "2")]
    pub window_start: i64,
    /// 开盘价
    #[prost(string, tag = "3")]
    pub opening_price: ::prost::alloc::string::String,
    /// 收盘价
    #[prost(string, tag = "4")]
    pub closing_price: ::prost::alloc::string::String,
    /// 最高价
    #[prost(string, tag = "5")]
    pub highest_price: ::prost::alloc::string::String,
    /// 最低价
    #[prost(string, tag = "6")]
    pub lowest_price: ::prost::alloc::string::String,
    /// 成交量
    #[prost(string, tag = "7")]
    pub volume: ::prost::alloc::string::String,
    /// 成交额
    #[prost(string, tag = "8")]
    pub amount: ::prost::alloc::string::String,
    /// 窗口结束时间戳(秒时间戳)
    #[prost(int64, tag = "9")]
    pub window_end: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicMiniTickerV3Api {
    /// 交易对名
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// 最新价格
    #[prost(string, tag = "2")]
    pub price: ::prost::alloc::string::String,
    /// utc+8时区涨跌幅
    #[prost(string, tag = "3")]
    pub rate: ::prost::alloc::string::String,
    /// 时区涨跌幅
    #[prost(string, tag = "4")]
    pub zoned_rate: ::prost::alloc::string::String,
    /// 滚动最高价
    #[prost(string, tag = "5")]
    pub high: ::prost::alloc::string::String,
    /// 滚动最低价
    #[prost(string, tag = "6")]
    pub low: ::prost::alloc::string::String,
    /// 滚动成交额
    #[prost(string, tag = "7")]
    pub volume: ::prost::alloc::string::String,
    /// 滚动成交量
    #[prost(string, tag = "8")]
    pub quantity: ::prost::alloc::string::String,
    /// utc+8时区上期收盘价模式涨跌幅
    #[prost(string, tag = "9")]
    pub last_close_rate: ::prost::alloc::string::String,
    /// 上期收盘价模式时区涨跌幅
    #[prost(string, tag = "10")]
    pub last_close_zoned_rate: ::prost::alloc::string::String,
    /// 上期收盘价模式滚动最高价
    #[prost(string, tag = "11")]
    pub last_close_high: ::prost::alloc::string::String,
    /// 上期收盘价模式滚动最低价
    #[prost(string, tag = "12")]
    pub last_close_low: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicMiniTickersV3Api {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<PublicMiniTickerV3Api>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicBookTickerBatchV3Api {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<PublicBookTickerV3Api>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicIncreaseDepthsBatchV3Api {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<PublicIncreaseDepthsV3Api>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDepthsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub asks: ::prost::alloc::vec::Vec<PublicAggreDepthV3ApiItem>,
    #[prost(message, repeated, tag = "2")]
    pub bids: ::prost::alloc::vec::Vec<PublicAggreDepthV3ApiItem>,
    #[prost(string, tag = "3")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub from_version: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub to_version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDepthV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDealsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub deals: ::prost::alloc::vec::Vec<PublicAggreDealsV3ApiItem>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDealsV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub trade_type: i32,
    #[prost(int64, tag = "4")]
    pub time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreBookTickerV3Api {
    #[prost(string, tag = "1")]
    pub bid_price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub bid_quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ask_price: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ask_quantity: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushDataV3ApiWrapper {
    /// *
    /// 频道
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    /// *
    /// 交易对
    #[prost(string, optional, tag = "3")]
    pub symbol: ::core::option::Option<::prost::alloc::string::String>,
    /// *
    /// 交易对ID
    #[prost(string, optional, tag = "4")]
    pub symbol_id: ::core::option::Option<::prost::alloc::string::String>,
    /// *
    /// 消息生成时间
    #[prost(int64, optional, tag = "5")]
    pub create_time: ::core::option::Option<i64>,
    /// *
    /// 消息推送时间
    #[prost(int64, optional, tag = "6")]
    pub send_time: ::core::option::Option<i64>,
    /// *
    /// 数据，NOTE：因为不能重复，所以类型和变量名尽量使用全名
    #[prost(
        oneof = "push_data_v3_api_wrapper::Body",
        tags = "301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315"
    )]
    pub body: ::core::option::Option<push_data_v3_api_wrapper::Body>,
}
/// Nested message and enum types in `PushDataV3ApiWrapper`.
pub mod push_data_v3_api_wrapper {
    /// *
    /// 数据，NOTE：因为不能重复，所以类型和变量名尽量使用全名
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Body {
        #[prost(message, tag = "301")]
        PublicDeals(super::PublicDealsV3Api),
        #[prost(message, tag = "302")]
        PublicIncreaseDepths(super::PublicIncreaseDepthsV3Api),
        #[prost(message, tag = "303")]
        PublicLimitDepths(super::PublicLimitDepthsV3Api),
        #[prost(message, tag = "304")]
        PrivateOrders(super::PrivateOrdersV3Api),
        #[prost(message, tag = "305")]
        PublicBookTicker(super::PublicBookTickerV3Api),
        #[prost(message, tag = "306")]
        PrivateDeals(super::PrivateDealsV3Api),
        #[prost(message, tag = "307")]
        PrivateAccount(super::PrivateAccountV3Api),
        #[prost(message, tag = "308")]
        PublicSpotKline(super::PublicSpotKlineV3Api),
        #[prost(message, tag = "309")]
        PublicMiniTicker(super::PublicMiniTickerV3Api),
        #[prost(message, tag = "310")]
        PublicMiniTickers(super::PublicMiniTickersV3Api),
        #[prost(message, tag = "311")]
        PublicBookTickerBatch(super::PublicBookTickerBatchV3Api),
        #[prost(message, tag = "312")]
        PublicIncreaseDepthsBatch(super::PublicIncreaseDepthsBatchV3Api),
        #[prost(message, tag = "313")]
        PublicAggreDepths(super::PublicAggreDepthsV3Api),
        #[prost(message, tag = "314")]
        PublicAggreDeals(super::PublicAggreDealsV3Api),
        #[prost(message, tag = "315")]
        PublicAggreBookTicker(super::PublicAggreBookTickerV3Api),
    }
}
